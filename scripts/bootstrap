#! /bin/bash

# ensure rvm if installed
function ensure_rvm() {
  ruby_string=`cat .ruby-version`
  gemset_name=`cat .ruby-gemset`

  # Load or create the specified environment
  if [[ -d "${rvm_path:-$HOME/.rvm}/environments" \
    && -s "${rvm_path:-$HOME/.rvm}/environments/${ruby_string}@${gemset_name}" ]] ; then
    \. "${rvm_path:-$HOME/.rvm}/environments/${ruby_string}@${gemset_name}"
  else
    rvm --create  "${ruby_string}@${gemset_name}"
  fi
}

function ensure_bundler() {
  bundle --version &> /dev/null
  if [ $? != 0 ]; then
    gem install bundler
  fi
}

function ensure_vagrant() {
  VAGRANT_VERSION=`vagrant --version | awk '{print $(NF)}'`
  # Test Vagrant version is greater than 1.2.2
  echo $VAGRANT_VERSION | grep -q "\(1\.2\.[2-9]\)\|\(1\.[3-9]\.\d\)\|\([2-9]\.\d\.\d\)"

  if [[ $? != 0 ]]; then
    echo "Please install latest vagrant version from http://www.vagrantup.com/downloads.html"
    exit 1
  fi
}

function execute_with_output() {
  echo "  --> $@"
  $@
}

ensure_rvm
ensure_bundler
ensure_vagrant

echo "Updating gems"
echo "  --> bundle install"
# Bundle while reducing excess noise.
bundle install | grep -v 'Using' | sed '/^$/d'

echo
echo "Updating cookbooks"
execute_with_output bundle exec librarian-chef install

echo
echo "Running vagrant"
if [ $# == 0 ]; then
  VAGRANT_ON=`vagrant status | grep "default                  running" &> /dev/null ; echo $?`
  VAGRANT_SUSPENDED=`vagrant status | grep "default                  saved" &> /dev/null ; echo $?`
  execute_with_output vagrant up
  if [ $VAGRANT_ON == 0 ] || [ $VAGRANT_SUSPENDED == 0 ] ; then
    execute_with_output vagrant provision
  fi
else
  execute_with_output vagrant $@
fi

if [ $? == 0 ]; then
  cat /etc/hosts | grep "192\.168\.33\.88\s*local\.iperture\.tircher\.com" &> /dev/null
  if [ $? != 0 ]; then
    echo "Adding '192.168.33.88   local.iperture.tircher.com local.iPerture.tircher.com' to your /etc/hosts file"
    sudo sh -c 'echo "192.168.33.88\tlocal.iperture.tircher.com local.iPerture.tircher.com" >> /etc/hosts'
  fi
fi
